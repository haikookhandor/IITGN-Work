# -*- coding: utf-8 -*-
"""Q1_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qS8-5c3lwMfeY1LGlMIEVk-f-5K2bDZC
"""

import numpy as np
import pandas as pd
import time
import statistics
import matplotlib.pyplot as plt
from linearRegression.linear_regression import LinearRegression
from linearRegression.metrics import *

np.random.seed(45)

N = 30
P = 5
X = pd.DataFrame(np.random.randn(N, P))
y = pd.Series(np.random.randn(N))


#Evaluating sklearn's implementation of linear regression
LR = LinearRegression(fit_intercept=True)
LR.fit_sklearn_LR(X,y)
y_hat = LR.predict(X)

print('For sklearn LinearRegression : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print("---------------------------")


#Evaluating solution of linear regression using normal equations
LR = LinearRegression(fit_intercept=True)
LR.fit_normal_equations(X,y)
y_hat = LR.predict(X)

print('For linear regression using normal equations : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print("---------------------------")



#Evaluating solution of linear regression using SVD
LR = LinearRegression(fit_intercept=True)
LR.fit_SVD(X,y)
y_hat = LR.predict(X)

print('For linear regression using SVD : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print("---------------------------")


# Average time taken for the Normal Equation method
times = [] 
for i in range(5):
    start_time = time.time()  # Record the current time
    LR = LinearRegression(fit_intercept=True)
    LR.fit_normal_equations(X,y)
    y_hat = LR.predict(X)
    end_time = time.time()  # Record the current time again
    time_taken = end_time - start_time  # Compute the time taken in seconds
    times.append(time_taken)  # Add the time taken to the list of times

mean_time = statistics.mean(times)  # Compute the mean of the times
std_time = statistics.stdev(times)  # Compute the standard deviation of the times

print(f"Mean time taken for fit_normal_equation is: {mean_time:.4f} seconds")
print(f"Std for fit_normal_equation is: {std_time:.4f} seconds")

# Average time taken for SKLearn Linear regression method
times = [] 
for i in range(5):
    start_time = time.time()  # Record the current time
    LR = LinearRegression(fit_intercept=True)
    LR.fit_sklearn_LR(X,y)
    y_hat = LR.predict(X)
    end_time = time.time()  # Record the current time again
    time_taken = end_time - start_time  # Compute the time taken in seconds
    times.append(time_taken)  # Add the time taken to the list of times

mean_time = statistics.mean(times)  # Compute the mean of the times
std_time = statistics.stdev(times)  # Compute the standard deviation of the times

print(f"Mean time taken for SKlearn is: {mean_time:.4f} seconds")
print(f"Std for SKlearn is: {std_time:.4f} seconds")

# Average time taken for SVD method
times = [] 
for i in range(5):
    start_time = time.time()  # Record the current time
    LR = LinearRegression(fit_intercept=True)
    LR.fit_SVD(X,y)
    y_hat = LR.predict(X)
    end_time = time.time()  # Record the current time again
    time_taken = end_time - start_time  # Compute the time taken in seconds
    times.append(time_taken)  # Add the time taken to the list of times

mean_time = statistics.mean(times)  # Compute the mean of the times
std_time = statistics.stdev(times)  # Compute the standard deviation of the times

print(f"Mean time taken for SVD is: {mean_time:.4f} seconds")
print(f"Std for SVD is: {std_time:.4f} seconds")